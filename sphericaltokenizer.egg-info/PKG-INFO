Metadata-Version: 2.1
Name: sphericaltokenizer
Version: 0.1.0
Summary: A cryptographic tokenizer using spherical decomposition for securing LLM embeddings
Home-page: https://github.com/yourusername/sphericaltokenizer
Author: SphericalTokens Team
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Security :: Cryptography
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.21.0
Requires-Dist: scipy>=1.7.0
Requires-Dist: cryptography>=3.4.7

# SphericalTokenizer

A cryptographic tokenizer library that secures embedding vectors through geometric transformations and role-based access control. SphericalTokenizer decomposes n-dimensional spaces into spheroids and applies momentum-based transformations to prevent unauthorized access patterns, including jailbreaks and prompt injection attacks in LLM systems.

## Features

- **Geometric Encryption**: Decomposes n-dimensional embedding spaces into n/3 spheroids
- **Momentum-Based Transformations**: Applies secure, reversible transformations using particle momentum
- **Role-Based Access Control**: Layered security model for fine-grained access control
- **Attack Prevention**: Protects against jailbreaks, prompt injection, and model extraction
- **Batch Processing**: Efficient handling of vector batches
- **Secure Similarity**: Compute similarities in encrypted space

## Installation

```bash
pip install sphericaltokenizer
```

## Quick Start

```python
import numpy as np
from sphericaltokenizer import SphericalTokenizer

# Initialize tokenizer
embedding_dim = 768  # Example dimension for BERT embeddings
master_key = b'your-secure-key-here'
tokenizer = SphericalTokenizer(embedding_dim, master_key)

# Create roles with permissions
tokenizer.create_role('admin', {'read', 'write', 'execute'})
tokenizer.create_role('user', {'read'})

# Example embedding vector
vector = np.random.randn(embedding_dim)

# Encrypt vector with role-based access
encrypted = tokenizer.encrypt(vector, roles=['user'])

# Decrypt vector with appropriate roles
decrypted = tokenizer.decrypt(encrypted, roles=['user'])

# Verify transformation
assert tokenizer.verify_transformation(vector, roles=['user'])
```

## Advanced Usage

### Batch Processing

```python
# Process multiple vectors efficiently
vectors = np.random.randn(100, embedding_dim)
encrypted_batch = tokenizer.transform_batch(vectors, roles=['user'])
```

### Secure Similarity Computation

```python
# Compare vectors in secure space
vector1 = np.random.randn(embedding_dim)
vector2 = np.random.randn(embedding_dim)
similarity = tokenizer.secure_similarity(vector1, vector2, roles=['user'])
```

### Role-Based Access Control

```python
# Create roles with specific permissions
tokenizer.create_role('moderator', {'read', 'moderate'})

# Validate access rights
required_permissions = {'read', 'moderate'}
has_access = tokenizer.validate_access(required_permissions, ['moderator'])

# Get effective permissions
effective_perms = tokenizer.get_effective_permissions(['admin', 'moderator'])
```

## Security Model

SphericalTokenizer implements a multi-layered security approach:

1. **Base Layer**: Geometric decomposition into spheroids
2. **Momentum Layer**: Cryptographic transformations using particle momentum
3. **Role Layer**: RBAC-based access control
4. **Composition Layer**: Secure layer composition and validation

### Attack Prevention

- **Jailbreak Prevention**: Geometric constraints prevent unauthorized command execution
- **Prompt Injection**: Layered RBAC prevents unauthorized access patterns
- **Model Extraction**: Encrypted embeddings resist reverse engineering attempts

## Mathematical Foundation

The library uses several key mathematical concepts:

1. **Spheroid Decomposition**: Optimal coverage of n-dimensional spaces
2. **Momentum Transformations**: Deterministic but secure vector operations
3. **Layer Composition**: Reversible transformations with validation

## Performance Considerations

- Efficient batch processing for multiple vectors
- Optimized spheroid decomposition
- Cached transformations for improved performance
- Parallel processing capabilities

## Contributing

Contributions are welcome! Please read our [Contributing Guidelines](CONTRIBUTING.md) for details on how to submit pull requests, report issues, and contribute to the project.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Citation

If you use SphericalTokenizer in your research, please cite:

```bibtex
@software{sphericaltokenizer2023,
  title={SphericalTokenizer: Geometric Encryption for LLM Security},
  author={SphericalTokens Team},
  year={2023},
  url={https://github.com/yourusername/sphericaltokenizer}
}
```

## Acknowledgments

- Inspired by geometric approaches to cryptography
- Built on established security principles and best practices
- Developed with focus on LLM security requirements
